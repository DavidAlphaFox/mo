{"name":"MO","body":"## Welcome to mo.\r\nmo(re) = guile + libuv.\r\n\r\nmo is an attempt to copy node.js's architecture based on guile and libuv. On top of guile and libuv, have a fun to program in scheme in a platform like node.js. User will benefit from both scheme language features and asynchronous IO.\r\n\r\nThis project is incomplete and under heavy development.\r\n\r\n### Example\r\n\r\n\t(require-mo \"http\" 'http)\r\n\t\r\n\t(http/start-server \"0.0.0.0\" 8080\r\n\t  (lambda (req resp)\r\n\t    (hashq-set! resp 'body \"<b>hello world!</b>\")\r\n\t    resp)\r\n\r\n## Features:\r\n\r\n  * asynchronous IO by libuv\r\n  * scheme scripting for frontend \r\n  * node.js style module system\r\n  * ruby style fiber library\r\n  * fiber scheduler library in event loop\r\n\r\n## APIs:\r\n\r\n### Module system:\r\n\r\nmo's module system is like node.js's. A mo file is a module. 'require-mo' is to load/evaluate file and 'export-mo' is to export functions in a module, so that other modules can access the functions.\r\n\r\n  * (require-mo \"module name\" 'instance-name)\r\n\r\n    'require-mo' loads module if it's not loaded before. The second argument is the instance name. It's used as export function's prefix. The functions exported by module will be like 'instance-name/foo'.\r\n\r\n  * (export-mo 'function)\r\n\r\n    'export-mo' exports the functions in current module. \r\n\r\n  example:\r\n\r\n  file: `m1.mo`\r\n\r\n\t(define (foo)\r\n\t  (display \"foo\\n\"))\r\n\t(export-mo 'foo)\r\n\r\n  file: `m2.mo`\r\n\r\n\t(require-mo \"m1.mo\" 'm)\r\n\t(m/foo)\r\n\r\n### Tick:\r\n\r\n  * (next-tick callback):\r\n\r\n    'next-tick' registers a callback into event loop. When event loop is free from IO activities, callback will be invoked.\r\n\r\n  example:\r\n\r\n\t(next-tick \r\n\t  (lambda ()\r\n\t    (display \"hi\\n\")))\r\n\r\n### Timer:\r\n\r\n  * (set-timeout callback delay):\r\n\r\n    'set-timeout' registers a timer. After time indicated by delay is out, callback will be invoked.\r\n\r\n  example:\r\n\r\n\t(set-timeout (lambda ()\r\n\t  (display \"timeout\\n\"))\r\n\t  100)\r\n\r\n  * (set-interval callback delay):\r\n\r\n    'set-interval' is like set-timeout, but the callback will be repeatly invoked after delay ms.\r\n\r\n  * (clear-timer id)\r\n\r\n    set-timer/interval return a IP for timer reference. 'clear-timer' can be used to terminate the timer.\r\n\r\n  example:\r\n\r\n\t(define timer (set-timeout\r\n\t  (lambda ()\r\n\t    (display \"hi\\n\"))\r\n          1000))\r\n\t(clear-timer timer)\r\n\r\n### Process:\r\n\r\n### More...","tagline":"mo is an attempt to copy node.js's architecture based on guile and libuv.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}